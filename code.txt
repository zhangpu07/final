import numpy as np
from PIL import Image
import cv2 as cv
import matplotlib.pyplot as plt
namelist=['test1.tif','test2.png','test3.jpg','test4.bmp','test5.png','test6.jpg']
#sobel
def mysobel(filename):
    img=cv.imread('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename,0)
    x=cv.Sobel(img,cv.CV_16S,1,0)
    y=cv.Sobel(img,cv.CV_16S,0,1)
    absx=cv.convertScaleAbs(x)
    absy=cv.convertScaleAbs(y)
    dist=cv.addWeighted(absx,0.5,absy,0.5,0)
    cv.imwrite('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'sobel.jpg',dist)

for name in namelist:
    mysobel(name)
#laplace
namelist=['test1.tif','test2.png','test3.jpg','test4.bmp','test5.png','test6.jpg']
def mylap(filename):
    img=cv.imread('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename,0)
#     print(img.shape)
    img_lap=cv.convertScaleAbs(cv.Laplacian(img,cv.CV_16S,ksize=3))
    cv.imwrite('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'laplace.jpg',img_lap)

for name in namelist:
    mylap(name)
def mycanny(filename,k):
    '''
    k=1:反色
    '''
    img=cv.imread('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'.'+filename.split('.')[1],0)
    Gaussianimg=cv.GaussianBlur(img, (3,3),1)#size,sigma
    if k==1:
        for i in range(img.shape[0]):
            for j in range(img.shape[1]):
                img[i][j]=255-img[i][j]
    canny=cv.Canny(Gaussianimg,100,200)
    cv.imwrite('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'canny.jpg',canny)
    
for name in namelist:
    mycanny(name,0)
#hough
def myhough(filename,i):
    img=cv.imread('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'.'+filename.split('.')[1],1)
    img_gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)
    
    Gaussianimg=cv.GaussianBlur(img_gray, (3,3),2)#size,sigma
    cannyimg1=cv.Canny(Gaussianimg,100,190)#canny, gray
    
    lines = cv.HoughLinesP(cannyimg1,1,np.pi/180, 80, minLineLength=int(cannyimg1.shape[1]/5), maxLineGap=houghline[i])
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv.line(img, (x1, y1), (x2, y2), (0,0,255), 2)

    cv.imshow
    cv.imwrite('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'cannyhough.jpg', img)

houghline=[25,25,6,20,10,6]    
for i,name in enumerate(namelist):
    myhough(name,i)    
def sobel01(filename,threshold_corr,ii):

    img_Og=cv.imread('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename,1)
#     print('open:\tD:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename)
#     img_gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)#gray
    img_Ogray=cv.GaussianBlur(cv.cvtColor(img_Og,cv.COLOR_BGR2GRAY), (5,5),1)#gray and Gaussian
#     0-255 by hist
    n, bins, patches = plt.hist(img_Ogray.flatten(), bins=256, density=False, facecolor='black', alpha=1,cumulative=0)
    cdf=n.cumsum()
    cdf=255*cdf/cdf[-1]
    img_gray = np.uint8(np.interp(img_Ogray.flatten(),bins[:-1],cdf)).reshape(img_Ogray.shape)
    plt.cla()
    plt.clf()
    plt.close('all')#refresh plt
#     #########end.         img_gray is 0-255 img  
    
#     sobel
    x=cv.Sobel(img_gray,cv.CV_16S,1,0)
    y=cv.Sobel(img_gray,cv.CV_16S,0,1)
    absx=cv.convertScaleAbs(x)
    absy=cv.convertScaleAbs(y)
    img_sobel=cv.addWeighted(absx,0.5,absy,0.5,0)
    #sobel img gray+canny
#     print(img_gray.shape)
#     return None



    #二值化
    for i in range(img_sobel.shape[0]):
        for j in range(img_sobel.shape[1]):
            img_sobel[i][j]= 255 if img_sobel[i][j]>=threshold_corr else 0
            
#     腐蚀
    kernel = cv.getStructuringElement(cv.MORPH_RECT, (3,3))
    erosion = cv.erode(img_sobel, kernel) 
    
    
#     cv.imshow('img',erosion)
#     cv.waitKey(0)
    

#     hough
#     img_cannysobel=erosion#cv.Canny(img_sobel,120,220)#canny, gray
    lines = cv.HoughLinesP(erosion,1,np.pi/180, 120, minLineLength=int(img_Og.shape[1]/7), maxLineGap=houghline[ii])
    
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv.line(img_Og, (x1, y1), (x2, y2), (0,0,255), 2)
#     cv.imshow('tst',img_Og)
#     cv.waitKey(0)
    cv.imwrite('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'sobelhough.jpg', img_Og)
#     print('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'10sobelhough.jpg')
    
    
    

namelist=['test1.tif','test2.png','test3.jpg','test4.bmp','test5.png','test6.jpg']  
houghline=[25,25,6,20,10,6]
threshold=[40,35,35,30,60,55]  

for i,name in enumerate(namelist):
    sobel01(name,threshold[i],i)
# i=5
# sobel01(namelist[i],threshold[i],i)
def sobel01(filename,threshold_corr,ii):

    img_Og=cv.imread('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename,1)
#     print('open:\tD:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename)
#     img_gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)#gray
    img_Ogray=cv.GaussianBlur(cv.cvtColor(img_Og,cv.COLOR_BGR2GRAY), (3,3),2)#gray and Gaussian
#     0-255 by hist
    n, bins, patches = plt.hist(img_Ogray.flatten(), bins=256, density=False, facecolor='black', alpha=1,cumulative=0)
    cdf=n.cumsum()
    cdf=250*cdf/cdf[-1]
    img_gray = np.uint8(np.interp(img_Ogray.flatten(),bins[:-1],cdf)).reshape(img_Ogray.shape)
    plt.cla()
    plt.clf()
    plt.close('all')#refresh plt
#     #########end.         img_gray is 0-255 img  


    img_lap=cv.convertScaleAbs(cv.Laplacian(img_gray,cv.CV_16S,ksize=3))


    #二值化
    for i in range(img_lap.shape[0]):
        for j in range(img_lap.shape[1]):
            img_lap[i][j]= 255 if img_lap[i][j]>=threshold_corr else 0
            
#     腐蚀
    kernel = cv.getStructuringElement(cv.MORPH_RECT, (3,3))
    erosion = cv.erode(img_lap, kernel) 
    
    
#     cv.imshow('img',erosion)
#     cv.waitKey(0)
    

#     hough
#     img_cannylap=cv.Canny(img_lap,120,220)#canny, gray
    lines = cv.HoughLinesP(erosion,1,np.pi/180, 120, minLineLength=int(img_Og.shape[0]/7), maxLineGap=houghline[ii])
    
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv.line(img_Og, (x1, y1), (x2, y2), (0,0,255), 2)
#     cv.imshow('tst',img_Og)
#     cv.waitKey(0)
    cv.imwrite('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'laplacehough.jpg', img_Og)
#     print('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'10sobelhough.jpg')
    
    
    

namelist=['test1.tif','test2.png','test3.jpg','test4.bmp','test5.png','test6.jpg']  
houghline=[15,15,7,10,6,7]
threshold=[22,11,12,1,30,27]  

for i,name in enumerate(namelist):
    sobel01(name,threshold[i],i)
# i=5

# sobel01(namelist[i],threshold[i],i)
def sobel01(filename,ii,size,sigma,rho):

    img_Og=cv.imread('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename,1)
    img_gray=cv.GaussianBlur(cv.cvtColor(img_Og,cv.COLOR_BGR2GRAY), (size,size),1.3)#gray and Gaussian

    
#     hough
    img_cannysobel=cv.Canny(img_gray,100,200)#canny, gray
#     cv.imshow('canny',img_cannysobel)
#     cv.waitKey(0)
    
    
    lines = cv.HoughLinesP(img_cannysobel,rho,np.pi/180, 120, minLineLength=int(img_Og.shape[1]/9), maxLineGap=houghline[ii])
       
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv.line(img_Og, (x1, y1), (x2, y2), (0,0,255), 2)
#     cv.imshow('tst',img_Og)
#     cv.waitKey(0)
    cv.imwrite('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'cannyhough.jpg', img_Og)
#     print('D:/cccccty/jupyterProjects/DigitalPicsProcess/HW7/'+filename.split('.')[0]+'10sobelhough.jpg')
    
    
    

namelist=['test1.tif','test2.png','test3.jpg','test4.bmp','test5.png','test6.jpg']  
houghline=[20,20,11,10,10,10]
gaussiansize=[5,1,3,3,11,13]
rho=[2,4,3,1,2,1]#bigger,more lines
gaussiansigma=[1.3,1.3,1.3,1.3,1.3,2]
for i,name in enumerate(namelist):
    sobel01(namelist[i],i,gaussiansize[i],gaussiansigma[i],rho[i])
# i=5
# sobel01(namelist[i],i,gaussiansize[i],gaussiansigma[i],rho[i])